{"version":3,"sources":["store/Employee.ts","store/WeatherForecasts.ts","store/index.ts","store/Counter.ts","components/NavMenu.tsx","components/Layout.tsx","components/Counter.tsx","components/FetchData.tsx","components/Employee.tsx","registerServiceWorker.ts","index.tsx","store/configureStore.ts","App.tsx"],"names":["ActionTypes","unloadedState","forecasts","isLoading","requestEmployeeList","dispatch","a","type","REQUEST_EMPLOYEE_LIST","RECEIVE_EMPLOYEE_LIST","employeeList","initialState","isFetching","reducers","counter","state","incomingAction","undefined","count","weatherForecasts","action","startDateIndex","employee","NavMenu","isOpen","toggle","setState","Navbar","className","light","Container","NavbarBrand","tag","Link","to","NavbarToggler","onClick","this","Collapse","navbar","NavItem","NavLink","React","props","children","Counter","increment","connect","decrement","FetchData","ensureDataFetched","renderForecastsTable","renderPagination","parseInt","match","params","requestWeatherForecasts","map","forecast","key","date","temperatureC","temperatureF","summary","prevStartDateIndex","nextStartDateIndex","getState","ConnectedEmployeeComponent","bindActionCreators","i","firstName","lastName","age","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","baseUrl","document","getElementsByTagName","getAttribute","history","createBrowserHistory","basename","store","middleware","thunk","routerMiddleware","rootReducer","combineReducers","router","connectRouter","enhancers","windowIfDefined","__REDUX_DEVTOOLS_EXTENSION__","push","createStore","compose","applyMiddleware","configureStore","ReactDOM","Layout","exact","path","component","getElementById","URL","process","toString","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.56d1035c.chunk.js","sourcesContent":["import { Dispatch as ReduxDispatch, Action, Reducer } from \"redux\";\r\n\r\ntype Dispatch = ReduxDispatch<Action<any>>;\r\n\r\nenum ActionTypes\r\n{\r\n    REQUEST_EMPLOYEE_LIST = \"REQUEST_EMPLOYEE_LIST\",\r\n    RECEIVE_EMPLOYEE_LIST = \"RECEIVE_EMPLOYEE_LIST\"\r\n}\r\n\r\ninterface IActions\r\n{\r\n    REQUEST_EMPLOYEE_LIST: { type: ActionTypes.REQUEST_EMPLOYEE_LIST };\r\n    RECEIVE_EMPLOYEE_LIST: { type: ActionTypes.RECEIVE_EMPLOYEE_LIST, employeeList: Employee[] }\r\n}\r\n\r\nexport type IAction = IActions[keyof IActions];\r\n\r\nexport interface EmployeeState\r\n{\r\n    employeeList: Employee[];\r\n    isFetching: boolean;\r\n}\r\n\r\nexport interface Employee\r\n{\r\n    firstName: string;\r\n    lastName: string;\r\n    age: number;\r\n}\r\n\r\nexport const requestEmployeeList = () => async (dispatch: Dispatch) =>\r\n{\r\n    dispatch({ type: ActionTypes.REQUEST_EMPLOYEE_LIST });\r\n\r\n    dispatch({ type: ActionTypes.RECEIVE_EMPLOYEE_LIST, employeeList: [] });\r\n}\r\n\r\nconst initialState: EmployeeState = { employeeList: [], isFetching: false };\r\n\r\nexport const reducer: Reducer<EmployeeState> = (state: EmployeeState | undefined, action: IAction): EmployeeState =>\r\n{\r\n    if (state === undefined)\r\n        return initialState;\r\n\r\n    switch (action.type)\r\n    {\r\n        case ActionTypes.REQUEST_EMPLOYEE_LIST:\r\n            return {\r\n                ...state,\r\n                isFetching: true\r\n            };\r\n\r\n        case ActionTypes.RECEIVE_EMPLOYEE_LIST:\r\n            return {\r\n                ...state,\r\n                employeeList: action.employeeList\r\n            };\r\n    }\r\n\r\n    return state;\r\n}","import { Action, Reducer } from 'redux';\r\nimport { AppThunkAction } from './';\r\n\r\n// -----------------\r\n// STATE - This defines the type of data maintained in the Redux store.\r\n\r\nexport interface WeatherForecastsState {\r\n    isLoading: boolean;\r\n    startDateIndex?: number;\r\n    forecasts: WeatherForecast[];\r\n}\r\n\r\nexport interface WeatherForecast {\r\n    date: string;\r\n    temperatureC: number;\r\n    temperatureF: number;\r\n    summary: string;\r\n}\r\n\r\n// -----------------\r\n// ACTIONS - These are serializable (hence replayable) descriptions of state transitions.\r\n// They do not themselves have any side-effects; they just describe something that is going to happen.\r\n\r\ninterface RequestWeatherForecastsAction {\r\n    type: 'REQUEST_WEATHER_FORECASTS';\r\n    startDateIndex: number;\r\n}\r\n\r\ninterface ReceiveWeatherForecastsAction {\r\n    type: 'RECEIVE_WEATHER_FORECASTS';\r\n    startDateIndex: number;\r\n    forecasts: WeatherForecast[];\r\n}\r\n\r\n// Declare a 'discriminated union' type. This guarantees that all references to 'type' properties contain one of the\r\n// declared type strings (and not any other arbitrary string).\r\ntype KnownAction = RequestWeatherForecastsAction | ReceiveWeatherForecastsAction;\r\n\r\n// ----------------\r\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\r\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\r\n\r\nexport const actionCreators = {\r\n    requestWeatherForecasts: (startDateIndex: number): AppThunkAction<KnownAction> => (dispatch, getState) => {\r\n        // Only load data if it's something we don't already have (and are not already loading) \r\n    }\r\n};\r\n\r\n// ----------------\r\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\r\n\r\nconst unloadedState: WeatherForecastsState = { forecasts: [], isLoading: false };\r\n\r\nexport const reducer: Reducer<WeatherForecastsState> = (state: WeatherForecastsState | undefined, incomingAction: Action): WeatherForecastsState => {\r\n    if (state === undefined) {\r\n        return unloadedState;\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'REQUEST_WEATHER_FORECASTS':\r\n            return {\r\n                startDateIndex: action.startDateIndex,\r\n                forecasts: state.forecasts,\r\n                isLoading: true\r\n            };\r\n        case 'RECEIVE_WEATHER_FORECASTS':\r\n            // Only accept the incoming data if it matches the most recent request. This ensures we correctly\r\n            // handle out-of-order responses.\r\n            if (action.startDateIndex === state.startDateIndex) {\r\n                return {\r\n                    startDateIndex: action.startDateIndex,\r\n                    forecasts: action.forecasts,\r\n                    isLoading: false\r\n                };\r\n            }\r\n            break;\r\n    }\r\n\r\n    return state;\r\n};\r\n","import * as WeatherForecasts from './WeatherForecasts';\r\nimport * as Counter from './Counter';\r\nimport * as Employee from \"./Employee\";\r\n\r\n// The top-level state object\r\nexport interface ApplicationState {\r\n    counter: Counter.CounterState | undefined;\r\n    weatherForecasts: WeatherForecasts.WeatherForecastsState | undefined;\r\n    employee: Employee.EmployeeState | undefined;\r\n}\r\n\r\n// Whenever an action is dispatched, Redux will update each top-level application state property using\r\n// the reducer with the matching name. It's important that the names match exactly, and that the reducer\r\n// acts on the corresponding ApplicationState property type.\r\nexport const reducers = {\r\n    counter: Counter.reducer,\r\n    weatherForecasts: WeatherForecasts.reducer,\r\n    employee: Employee.reducer\r\n};\r\n\r\n// This type can be used as a hint on action creators so that its 'dispatch' and 'getState' params are\r\n// correctly typed to match your store.\r\nexport interface AppThunkAction<TAction> {\r\n    (dispatch: (action: TAction) => void, getState: () => ApplicationState): void;\r\n}\r\n","import { Action, Reducer } from 'redux';\r\n\r\n// -----------------\r\n// STATE - This defines the type of data maintained in the Redux store.\r\n\r\nexport interface CounterState {\r\n    count: number;\r\n}\r\n\r\n// -----------------\r\n// ACTIONS - These are serializable (hence replayable) descriptions of state transitions.\r\n// They do not themselves have any side-effects; they just describe something that is going to happen.\r\n// Use @typeName and isActionType for type detection that works even after serialization/deserialization.\r\n\r\nexport interface IncrementCountAction { type: 'INCREMENT_COUNT' }\r\nexport interface DecrementCountAction { type: 'DECREMENT_COUNT' }\r\n\r\n// Declare a 'discriminated union' type. This guarantees that all references to 'type' properties contain one of the\r\n// declared type strings (and not any other arbitrary string).\r\nexport type KnownAction = IncrementCountAction | DecrementCountAction;\r\n\r\n// ----------------\r\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\r\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\r\n\r\nexport const actionCreators = {\r\n    increment: () => <IncrementCountAction>{ type: 'INCREMENT_COUNT' },\r\n    decrement: () => <DecrementCountAction>{ type: 'DECREMENT_COUNT' }\r\n};\r\n\r\n// ----------------\r\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\r\n\r\nexport const reducer: Reducer<CounterState> = (state: CounterState | undefined, incomingAction: Action): CounterState => {\r\n    if (state === undefined) {\r\n        return { count: 0 };\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'INCREMENT_COUNT':\r\n            return { count: state.count + 1 };\r\n        case 'DECREMENT_COUNT':\r\n            return { count: state.count - 1 };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import * as React from 'react';\r\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './NavMenu.css';\r\n\r\nexport default class NavMenu extends React.PureComponent<{}, { isOpen: boolean }> {\r\n    public state = {\r\n        isOpen: false\r\n    };\r\n\r\n    public render() {\r\n        return (\r\n            <header>\r\n                <Navbar className=\"navbar-expand-sm navbar-toggleable-sm border-bottom box-shadow mb-3\" light>\r\n                    <Container>\r\n                        <NavbarBrand tag={Link} to=\"/\">Client</NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggle} className=\"mr-2\"/>\r\n                        <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={this.state.isOpen} navbar>\r\n                            <ul className=\"navbar-nav flex-grow\">\r\n                                <NavItem>\r\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/\">Home</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/counter\">Counter</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/fetch-data\">Fetch data</NavLink>\r\n                                </NavItem>\r\n                            </ul>\r\n                        </Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </header>\r\n        );\r\n    }\r\n\r\n    private toggle = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport NavMenu from './NavMenu';\r\n\r\nexport default (props: { children?: React.ReactNode }) => (\r\n    <React.Fragment>\r\n        <NavMenu/>\r\n        <Container>\r\n            {props.children}\r\n        </Container>\r\n    </React.Fragment>\r\n);\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { ApplicationState } from '../store';\r\nimport * as CounterStore from '../store/Counter';\r\n\r\ntype CounterProps =\r\n    CounterStore.CounterState &\r\n    typeof CounterStore.actionCreators &\r\n    RouteComponentProps<{}>;\r\n\r\nclass Counter extends React.PureComponent<CounterProps> {\r\n    public render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h1>Counter</h1>\r\n\r\n                <p>This is a simple example of a React component.</p>\r\n\r\n                <p>Current count: <strong>{this.props.count}</strong></p>\r\n\r\n                <button type=\"button\"\r\n                        className=\"btn btn-primary btn-lg\"\r\n                        onClick={() => { this.props.increment(); }}>\r\n                    Increment\r\n                </button>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    (state: ApplicationState) => state.counter,\r\n    CounterStore.actionCreators\r\n)(Counter);\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport { ApplicationState } from '../store';\r\nimport * as WeatherForecastsStore from '../store/WeatherForecasts';\r\n\r\n// At runtime, Redux will merge together...\r\ntype WeatherForecastProps =\r\n    WeatherForecastsStore.WeatherForecastsState // ... state we've requested from the Redux store\r\n    & typeof WeatherForecastsStore.actionCreators // ... plus action creators we've requested\r\n    & RouteComponentProps<{ startDateIndex: string }>; // ... plus incoming routing parameters\r\n\r\n\r\nclass FetchData extends React.PureComponent<WeatherForecastProps> {\r\n    // This method is called when the component is first added to the document\r\n    public componentDidMount() {\r\n        this.ensureDataFetched();\r\n    }\r\n\r\n    // This method is called when the route parameters change\r\n    public componentDidUpdate() {\r\n        this.ensureDataFetched();\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h1>Weather forecast</h1>\r\n                <p>This component demonstrates fetching data from the server and working with URL parameters.</p>\r\n                { this.renderForecastsTable() }\r\n                { this.renderPagination() }\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    private ensureDataFetched() {\r\n        const startDateIndex = parseInt(this.props.match.params.startDateIndex, 10) || 0;\r\n        this.props.requestWeatherForecasts(startDateIndex);\r\n    }\r\n\r\n    private renderForecastsTable() {\r\n        return (\r\n            <table className='table table-striped'>\r\n                <thead>\r\n                <tr>\r\n                    <th>Date</th>\r\n                    <th>Temp. (C)</th>\r\n                    <th>Temp. (F)</th>\r\n                    <th>Summary</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {this.props.forecasts.map((forecast: WeatherForecastsStore.WeatherForecast) =>\r\n                    <tr key={forecast.date}>\r\n                        <td>{forecast.date}</td>\r\n                        <td>{forecast.temperatureC}</td>\r\n                        <td>{forecast.temperatureF}</td>\r\n                        <td>{forecast.summary}</td>\r\n                    </tr>\r\n                )}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n\r\n    private renderPagination() {\r\n        const prevStartDateIndex = (this.props.startDateIndex || 0) - 5;\r\n        const nextStartDateIndex = (this.props.startDateIndex || 0) + 5;\r\n\r\n        return (\r\n            <div className=\"d-flex justify-content-between\">\r\n                <Link className='btn btn-outline-secondary btn-sm' to={`/fetch-data/${prevStartDateIndex}`}>Previous</Link>\r\n                {this.props.isLoading && <span>Loading...</span>}\r\n                <Link className='btn btn-outline-secondary btn-sm' to={`/fetch-data/${nextStartDateIndex}`}>Next</Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state: ApplicationState) => state.weatherForecasts, // Selects which state properties are merged into the component's props\r\n    WeatherForecastsStore.actionCreators // Selects which action creators are merged into the component's props\r\n)(FetchData as any);\r\n","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators, Dispatch } from \"redux\";\r\nimport { Employee, EmployeeState, requestEmployeeList } from \"../store/Employee\";\r\nimport { ApplicationState } from \"../store\";\r\n\r\ninterface StateProps\r\n{\r\n    employeeList: Employee[];\r\n    \r\n}\r\n\r\ninterface DispatchProps\r\n{\r\n    requestEmployeeList: () => void;\r\n}\r\n\r\ntype IProps = StateProps & DispatchProps;\r\n\r\nconst EmployeeComponent: React.FunctionComponent<IProps> = ({ employeeList, requestEmployeeList}) =>\r\n{\r\n    return (\r\n        <div>\r\n            <button onClick={requestEmployeeList} className=\"button\">Request</button>\r\n            <table className=\"table\">\r\n                <thead>\r\n                    <tr><th>First Name</th><th>Last Name</th><th>Age</th></tr>\r\n                </thead>\r\n                <tbody>\r\n                {employeeList.map((employee, i) =>\r\n                    <tr key={i}>\r\n                        <td>{employee.firstName}</td>\r\n                        <td>{employee.lastName}</td>\r\n                        <td>{employee.age}</td>\r\n                    </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst bindStateToProps = (state: ApplicationState) =>\r\n{\r\n    let employeeList = state.employee === undefined ? [] : (state.employee as EmployeeState).employeeList;\r\n\r\n    return {\r\n        employeeList: employeeList\r\n    };\r\n}\r\n\r\nconst bindDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\r\n{\r\n    requestEmployeeList: requestEmployeeList\r\n}, dispatch)\r\n\r\nexport const ConnectedEmployeeComponent = connect(bindStateToProps, bindDispatchToProps)(EmployeeComponent);","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const url = process.env.PUBLIC_URL as string;\r\n        const publicUrl = new URL(url, window.location.toString());\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Lets check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl);\r\n            } else {\r\n                // Is not local host. Just register service worker\r\n                registerValidSW(swUrl);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing as ServiceWorker;\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the old content will have been purged and\r\n                            // the fresh content will have been added to the cache.\r\n                            // It's the perfect time to display a \"New content is\r\n                            // available; please refresh.\" message in your web app.\r\n                            console.log('New content is available; please refresh.');\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\n\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { ConnectedRouter } from 'connected-react-router';\r\nimport { createBrowserHistory } from 'history';\r\nimport configureStore from './store/configureStore';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\n// Create browser history to use in the Redux store\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href') as string;\r\nconst history = createBrowserHistory({ basename: baseUrl });\r\n\r\n// Get the application-wide store instance, prepopulating with state from the server where available.\r\nconst store = configureStore(history);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ConnectedRouter history={history}>\r\n            <App />\r\n        </ConnectedRouter>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\nregisterServiceWorker();\r\n","import { applyMiddleware, combineReducers, compose, createStore, Reducer } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\r\nimport { History } from 'history';\r\nimport { ApplicationState, reducers } from './';\r\n\r\nexport default function configureStore(history: History, initialState?: ApplicationState) {\r\n    const middleware = [\r\n        thunk,\r\n        routerMiddleware(history)\r\n    ];\r\n\r\n    const rootReducer = combineReducers({\r\n        ...reducers,\r\n        router: connectRouter(history)\r\n    });\r\n\r\n    const enhancers = [];\r\n    const windowIfDefined = typeof window === 'undefined' ? null : window as any;\r\n    if (windowIfDefined && windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__) {\r\n        enhancers.push(windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__());\r\n    }\r\n\r\n    return createStore(\r\n        rootReducer,\r\n        initialState,\r\n        compose(applyMiddleware(...middleware), ...enhancers)\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { Route } from 'react-router';\r\nimport Layout from './components/Layout';\r\nimport Counter from './components/Counter';\r\nimport FetchData from './components/FetchData';\r\nimport { ConnectedEmployeeComponent } from \"./components/Employee\";\r\n\r\nexport default () => (\r\n    <Layout>\r\n        <Route exact path='/' component={ConnectedEmployeeComponent}/>\r\n        <Route path='/counter' component={Counter} />\r\n        <Route path='/fetch-data/:startDateIndex?' component={FetchData} />\r\n    </Layout>\r\n);\r\n"],"sourceRoot":""}